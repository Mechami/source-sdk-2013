include_guard()
set(CMAKE_MODULE_PATH ${SP_SOURCE_DIR}/cmake)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_OPTIMIZE_DEPENDENCIES ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
set(CMAKE_LINK_WHAT_YOU_USE OFF)

option(SOURCESDK "Building in SDK Mode." ON)
option(EPISODIC "Build Episodic." ON)
if (EPISODIC)
	set(GAMENAME Episodic)
else()
	set(GAMENAME HL2)
endif()

if (DEFINED ENV{VPROJECT})
	set(VPROJECT "$ENV{VPROJECT}" CACHE PATH "Path to game directory" FORCE)
	if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		set(CMAKE_INSTALL_PREFIX "${VPROJECT}" CACHE PATH "Path to game directory" FORCE)
	endif()
	message(STATUS "VPROJECT directory: ${VPROJECT}")
else()
	if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		string(TOLOWER ${GAMENAME} GAMENAME_LC)
		file(REAL_PATH "../game/mod_${GAMENAME_LC}" CMAKE_INSTALL_PREFIX BASE_DIRECTORY ${SP_SOURCE_DIR} EXPAND_TILDE)
		set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "Path to in-tree game directory" FORCE)
		unset(GAMENAME_LC)
	endif()
	message(STATUS "VPROJECT directory not defined")
endif()
message(STATUS "Installing binaries to ${CMAKE_INSTALL_PREFIX}/bin")

option(OPT_ENABLE_CCACHE "Use ccache to speedup builds." ON)
if (OPT_ENABLE_CCACHE)
	set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
endif()
option(OPT_SUPPRESS_WARNINGS "Suppress compiler warnings when not desired or not actively developing code." OFF)
option(OPT_STRICT_COMPILER "Enable strict compiler warnings." OFF)
option(OPT_SAVE_TEMPORARIES "Save temporary intermediate files generated by the compiler." OFF)
option(OPT_ERROR_SO_UNDEFINED_SYMBOLS "Produce linking errors if undefined symbols are encountered when linking shared objects." ON)
option(OPT_ENABLE_IPA_PTA "Enable Points-to analysis for Release and MinSizeRel builds if supported by the compiler." OFF)

if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
#	set(CMAKE_CXX_FLAGS_DEBUG "")
#	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "")
#	set(CMAKE_CXX_FLAGS_RELEASE "")
#	set(CMAKE_CXX_FLAGS_MINSIZEREL "")
elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	set(CMAKE_C_FLAGS "/arch:sse")
	set(CMAKE_CXX_FLAGS "/arch:sse")
	set(CMAKE_EXE_LINKER_FLAGS /MACHINE:X86)
	set(CMAKE_SHARED_LINKER_FLAGS /MACHINE:X86)
	set(CMAKE_MODULE_LINKER_FLAGS /MACHINE:X86)

	set(CMAKE_CXX_FLAGS_DEBUG "/w")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/w")
	set(CMAKE_CXX_FLAGS_RELEASE "/w")
	set(CMAKE_CXX_FLAGS_MINSIZEREL "/w")
else()
	message(FATAL_ERROR "Compiler \"${CMAKE_CXX_COMPILER_ID}\" not supported - Please switch to GCC, Clang or MSVC")
endif()
